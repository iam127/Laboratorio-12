class SeatNode:
    def __init__(self, seat_id):
        self.seat_id = seat_id     
        self.left = None
        self.right = None
        self.height = 1

class CinePeruAVL:
    def get_height(self, node):
        """Get height of node (0 if None)"""
        if not node:
            return 0
        return node.height
    
    def get_balance(self, node):
        """Get balance factor of node"""
        if not node:
            return 0
        return self.get_height(node.left) - self.get_height(node.right)
    
    def update_height(self, node):
        """Update height of node based on children"""
        if node:
            node.height = 1 + max(self.get_height(node.left), self.get_height(node.right))
    
    def rotate_right(self, y):
        """Right rotation for LL case"""
        x = y.left
        T2 = x.right
        
        x.right = y
        y.left = T2
        
        self.update_height(y)
        self.update_height(x)
        
        return x
    
    def rotate_left(self, x):
        """Left rotation for RR case"""
        y = x.right
        T2 = y.left
        
        y.left = x
        x.right = T2
        
        self.update_height(x)
        self.update_height(y)
        
        return y

    def insert_seat(self, root, seat_id):
        """üéüÔ∏è Insert a seat reservation into the AVL Tree"""
        if not root:
            return SeatNode(seat_id)
        
        if seat_id < root.seat_id:
            root.left = self.insert_seat(root.left, seat_id)
        elif seat_id > root.seat_id:
            root.right = self.insert_seat(root.right, seat_id)
        else:
            return root
        
        self.update_height(root)
        
        balance = self.get_balance(root)
        
        if balance > 1 and seat_id < root.left.seat_id:
            return self.rotate_right(root)
        
        if balance < -1 and seat_id > root.right.seat_id:
            return self.rotate_left(root)
        
        if balance > 1 and seat_id > root.left.seat_id:
            root.left = self.rotate_left(root.left)
            return self.rotate_right(root)
        
        if balance < -1 and seat_id < root.right.seat_id:
            root.right = self.rotate_right(root.right)
            return self.rotate_left(root)
        
        return root

    def find_min_node(self, root):
        """Find node with minimum value"""
        while root.left:
            root = root.left
        return root

    def delete_seat(self, root, seat_id):
        """üö´ Cancel a reservation and rebalance"""
        if not root:
            return root
        
        if seat_id < root.seat_id:
            root.left = self.delete_seat(root.left, seat_id)
        elif seat_id > root.seat_id:
            root.right = self.delete_seat(root.right, seat_id)
        else:
            if not root.left:
                return root.right
            elif not root.right:
                return root.left
            else:
                temp = self.find_min_node(root.right)
                root.seat_id = temp.seat_id
                root.right = self.delete_seat(root.right, temp.seat_id)
        
        self.update_height(root)
        
        balance = self.get_balance(root)
        
        if balance > 1 and self.get_balance(root.left) >= 0:
            return self.rotate_right(root)
        
        if balance > 1 and self.get_balance(root.left) < 0:
            root.left = self.rotate_left(root.left)
            return self.rotate_right(root)
        
        if balance < -1 and self.get_balance(root.right) <= 0:
            return self.rotate_left(root)
        
        if balance < -1 and self.get_balance(root.right) > 0:
            root.right = self.rotate_right(root.right)
            return self.rotate_left(root)
        
        return root

    def search_seat(self, root, seat_id):
        """Search for a specific seat"""
        if not root or root.seat_id == seat_id:
            return root
        
        if seat_id < root.seat_id:
            return self.search_seat(root.left, seat_id)
        else:
            return self.search_seat(root.right, seat_id)

    def find_nearest_available(self, root, preferred_id):
        """üîç Find closest available seat to preferred seat_id"""
        if not root:
            return None
        
        all_seats = []
        self._collect_seats(root, all_seats)
        
        if not all_seats:
            return None
        
        def parse_seat_id(seat_id):
            parts = seat_id.split('-')
            if len(parts) >= 3:
                sala = parts[0]
                row = parts[1]
                seat_num = int(parts[2]) if parts[2].isdigit() else 0
                return sala, row, seat_num
            return "", "", 0
        
        pref_sala, pref_row, pref_num = parse_seat_id(preferred_id)
        
        best_seat = None
        min_distance = float('inf')
        
        for seat_id in all_seats:
            sala, row, seat_num = parse_seat_id(seat_id)
            
            row_diff = abs(ord(row[0]) - ord(pref_row[0])) if row and pref_row else 0
            seat_diff = abs(seat_num - pref_num)
            distance = row_diff * 10 + seat_diff  
            
            if distance < min_distance:
                min_distance = distance
                best_seat = seat_id
        
        return best_seat
    
    def _collect_seats(self, root, seats_list):
        """Helper method to collect all seat IDs"""
        if root:
            self._collect_seats(root.left, seats_list)
            seats_list.append(root.seat_id)
            self._collect_seats(root.right, seats_list)

    def inorder(self, root):
        """üìú In-order traversal to list all seats in sorted order"""
        if root:
            self.inorder(root.left)
            print(root.seat_id, end=" ")
            self.inorder(root.right)

    def print_tree_structure(self, root, level=0, prefix="Root: "):
        """Helper method to visualize tree structure"""
        if root:
            print(" " * (level * 4) + prefix + root.seat_id)
            if root.left or root.right:
                if root.left:
                    self.print_tree_structure(root.left, level + 1, "L--- ")
                else:
                    print(" " * ((level + 1) * 4) + "L--- None")
                if root.right:
                    self.print_tree_structure(root.right, level + 1, "R--- ")
                else:
                    print(" " * ((level + 1) * 4) + "R--- None")

def test_cineperu_seats():
    print("üé¨ Testing CinePer√∫ Seat Optimizer üé¨")
    print("=" * 50)
    
    avl = CinePeruAVL()
    root = None
    
    print("\nüß™ Test 1: Inserting seats Sala1-A-5, Sala1-A-6, Sala1-A-4")
    root = avl.insert_seat(root, "Sala1-A-5")
    root = avl.insert_seat(root, "Sala1-A-6")
    root = avl.insert_seat(root, "Sala1-A-4")
    
    print("In-order traversal:")
    avl.inorder(root)
    print("\nExpected: Sala1-A-4 Sala1-A-5 Sala1-A-6")
    
    print("\nTree structure:")
    avl.print_tree_structure(root)
    
    print("\nüß™ Test 2: Deleting Sala1-A-5")
    root = avl.delete_seat(root, "Sala1-A-5")
    print("In-order traversal after deletion:")
    avl.inorder(root)
    print("\nExpected: Sala1-A-4 Sala1-A-6")
    
    print("\nüß™ Test 3: Adding more seats and testing nearest available")
    for seat in ["Sala1-A-5", "Sala1-A-7", "Sala1-A-3"]:
        root = avl.insert_seat(root, seat)
    
    print("Current seats:")
    avl.inorder(root)
    
    nearest = avl.find_nearest_available(root, "Sala1-A-6")
    print(f"\nNearest available seat to Sala1-A-6: {nearest}")
    print("Expected: Sala1-A-5 or Sala1-A-7 (closest to A-6)")
    
    print("\nüß™ Test 4: Adding seats from different rows")
    for seat in ["Sala1-B-1", "Sala1-B-2", "Sala1-A-2"]:
        root = avl.insert_seat(root, seat)
    
    print("All seats in order:")
    avl.inorder(root)
    print("\nTree structure:")
    avl.print_tree_structure(root)
    
    print("\nüß™ Test 5: Deleting multiple seats")
    root = avl.delete_seat(root, "Sala1-A-4")
    root = avl.delete_seat(root, "Sala1-B-2")
    
    print("Final seats after deletions:")
    avl.inorder(root)
    
    print("\nFinal tree structure:")
    avl.print_tree_structure(root)
    
    print("\nüß™ Test 6: Search functionality")
    search_result = avl.search_seat(root, "Sala1-A-7")
    print(f"Searching for Sala1-A-7: {'Found' if search_result else 'Not found'}")
    
    search_result = avl.search_seat(root, "Sala1-A-99")
    print(f"Searching for Sala1-A-99: {'Found' if search_result else 'Not found'}")

if __name__ == "__main__":
    test_cineperu_seats()
