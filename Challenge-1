class AVLNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def insert(self, root, key):
        """🌱 Insert key and rebalance the AVL Tree"""
        if not root:
            return AVLNode(key)
        
        if key < root.key:
            root.left = self.insert(root.left, key)
        elif key > root.key:
            root.right = self.insert(root.right, key)
        else:
            return root
        
        root.height = 1 + max(self.get_height(root.left), 
                             self.get_height(root.right))
        
        balance = self.get_balance(root)
        
        
        if balance > 1 and key < root.left.key:
            return self.right_rotate(root)
        
        if balance < -1 and key > root.right.key:
            return self.left_rotate(root)
        
        if balance > 1 and key > root.left.key:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)
        
        if balance < -1 and key < root.right.key:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)
        
        return root
    
    def get_height(self, node):
        """📏 Return height of a node"""
        if not node:
            return 0
        return node.height
    
    def get_balance(self, node):
        """⚖️ Return balance factor"""
        if not node:
            return 0
        return self.get_height(node.left) - self.get_height(node.right)
    
    def left_rotate(self, z):
        """🔄 Perform left rotation (for RR case)"""
        y = z.right
        T2 = y.left
        
        y.left = z
        z.right = T2
        
        z.height = 1 + max(self.get_height(z.left), 
                          self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), 
                          self.get_height(y.right))
        
        return y
    
    def right_rotate(self, z):
        """🔄 Perform right rotation (for LL case)"""
        y = z.left
        T3 = y.right
        
        y.right = z
        z.left = T3
        
        z.height = 1 + max(self.get_height(z.left), 
                          self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), 
                          self.get_height(y.right))
        
        return y
    
    def inorder(self, root):
        """📜 In-order traversal"""
        if root:
            self.inorder(root.left)
            print(root.key, end=" ")
            self.inorder(root.right)

def test_avl_insert():
    avl = AVLTree()
    root = None
    for val in [10, 20, 30]:
        root = avl.insert(root, val)
    print("🧪 Test 1 (RR):", end=" ")
    avl.inorder(root)  
    print()
    
    avl = AVLTree()
    root = None
    for val in [30, 20, 10]:
        root = avl.insert(root, val)
    print("🧪 Test 2 (LL):", end=" ")
    avl.inorder(root) 
    print()
    
    avl = AVLTree()
    root = None
    for val in [30, 10, 20]:
        root = avl.insert(root, val)
    print("🧪 Test 3 (LR):", end=" ")
    avl.inorder(root) 
    print()
    
    avl = AVLTree()
    root = None
    for val in [10, 30, 20]:
        root = avl.insert(root, val)
    print("🧪 Test 4 (RL):", end=" ")
    avl.inorder(root) 
    print()
    
    avl = AVLTree()
    root = None
    for val in [15, 10, 20, 25, 30]:
        root = avl.insert(root, val)
    print("🧪 Test 5 (Balanced):", end=" ")
    avl.inorder(root)  
    print()

test_avl_insert()
